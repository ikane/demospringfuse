/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/test/java/domain/ModelTest.e.vm.java
 */
package org.ikane.demospringfuse.domain;

import java.io.*;
import java.util.*;

import static org.junit.Assert.*;
import org.junit.Test;

import org.ikane.demospringfuse.util.*;
import static javax.persistence.CascadeType.ALL;
import static javax.persistence.CascadeType.MERGE;
import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.EnumType.STRING;
import static javax.persistence.FetchType.LAZY;
import static javax.persistence.TemporalType.TIMESTAMP;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.Transient;
import javax.persistence.Version;
import javax.validation.constraints.Size;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.ParamDef;
import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.NotEmpty;
import org.ikane.demospringfuse.domain.Address;
import org.ikane.demospringfuse.domain.Book;
import org.ikane.demospringfuse.domain.Civility;
import org.ikane.demospringfuse.domain.Document;
import org.ikane.demospringfuse.domain.Role;

import org.ikane.demospringfuse.domain.Civility;

/**
 * Basic tests for Account
 */
@SuppressWarnings("unused")
public class AccountTest {

    // test unique primary key
    @Test
    public void newInstanceHasNoPrimaryKey() {
        Account model = new Account();
        assertFalse(model.isIdSet());
    }

    @Test
    public void isIdSetReturnsTrue() {
        Account model = new Account();
        model.setId(ValueGenerator.getUniqueString(32));
        assertNotNull(model.getId());
        assertTrue(model.isIdSet());
    }

    // test columns methods

    //-------------------------------------------------------------
    // Many to One:  Account.addressId ==> Address.id
    //-------------------------------------------------------------

    @Test
    public void manyToOne_setHomeAddress() {
        Account many = new Account();

        // init
        Address one = new Address();

        one.setId(ValueGenerator.getUniqueInteger());
        many.setHomeAddress(one);

        // make sure it is propagated properly
        assertNotNull(many.getAddressId());
        assertEquals(one, many.getHomeAddress());
        assertSame(many.getAddressId(), one.getId());
        // now set it to back to null
        many.setHomeAddress(null);

        // make sure null is propagated properly
        assertNull(many.getHomeAddress());

        // make sure it is propagated on fk column as well
        assertNull(many.getAddressId());
    }

    //-------------------------------------------------------------
    // One to Many: SimpleOneToMany ACCOUNT.ID ==> BOOK.ACCOUNT_ID
    //-------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // book.book <-- account.accounts
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Test
    public void oneToMany_addBook() {
        Account one = new Account();
        Book many = new Book();

        // init
        one.addBook(many);

        // make sure it is propagated
        assertTrue(one.getBooks().contains(many));
        assertTrue(one.equals(many.getAccount()));

        // now set it to null
        one.removeBook(many);

        // make sure null is propagated
        assertFalse(one.getBooks().contains(many));
        assertNull(many.getAccount());
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // document.document <-- account.accounts
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Test
    public void oneToMany_addDocument() {
        Account one = new Account();
        Document many = new Document();

        // init
        one.addDocument(many);

        // make sure it is propagated
        assertTrue(one.getDocuments().contains(many));
        assertTrue(one.equals(many.getAccount()));

        // now set it to null
        one.removeDocument(many);

        // make sure null is propagated
        assertFalse(one.getDocuments().contains(many));
        assertNull(many.getAccount());
    }

    //-------------------------------------------------------------
    // Pure Many to Many
    //-------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Test
    public void manyToMany_addRole() {
        Account many1 = new Account();
        Role many2 = new Role();

        // add it
        many1.addRole(many2);

        // check it is propagated
        assertTrue(many1.getRoles().contains(many2));
        // now let's remove it
        many1.removeRole(many2);

        // check it is propagated
        assertFalse(many1.getRoles().contains(many2));
    }

    @Test
    public void toStringNotNull() {
        Account model = new Account();
        assertNotNull(model.toString());
    }

    @Test
    public void equalsUsingBusinessKey() {
        Account model1 = new Account();
        Account model2 = new Account();
        String username = ValueGenerator.getUniqueString(100);
        model1.setUsername(username);
        model2.setUsername(username);
        assertTrue(model1.equals(model2));
        assertTrue(model2.equals(model1));
        assertTrue(model1.hashCode() == model2.hashCode());
    }
}