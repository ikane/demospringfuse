/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/domain/Entity.e.vm.java
 */
package org.ikane.demospringfuse.domain;

import static javax.persistence.CascadeType.ALL;
import static javax.persistence.CascadeType.MERGE;
import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.EnumType.STRING;
import static javax.persistence.FetchType.LAZY;
import static javax.persistence.TemporalType.TIMESTAMP;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.Transient;
import javax.persistence.Version;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlTransient;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.ParamDef;
import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.NotEmpty;
import org.ikane.demospringfuse.audit.AuditContextHolder;
import org.ikane.demospringfuse.domain.Address;
import org.ikane.demospringfuse.domain.Book;
import org.ikane.demospringfuse.domain.Civility;
import org.ikane.demospringfuse.domain.Document;
import org.ikane.demospringfuse.domain.Role;
import com.google.common.base.Objects;

@Entity
@Table(name = "ACCOUNT")
@FilterDef(name = "myAccountFilter", defaultCondition = "ID = :currentAccountId ", parameters = @ParamDef(name = "currentAccountId", type = "org.hibernate.type.StringType"))
@Filter(name = "myAccountFilter")
public class Account implements Identifiable<String>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(Account.class);

    // Raw attributes
    private String id; // pk
    private String username; // unique (not null)
    private String password; // not null
    private String email; // unique (not null)
    private Boolean isEnabled;
    private Civility civility;
    private String firstName;
    private String lastName;
    private Date birthDate;
    private String description;
    private Date creationDate;
    private String creationAuthor;
    private Date lastModificationDate;
    private String lastModificationAuthor;
    private Integer version;

    // Technical attributes for query by example
    private Integer addressId;

    // Many to one
    private Address homeAddress; // (addressId)

    // One to many
    private List<Book> books = new ArrayList<Book>();
    private List<Document> documents = new ArrayList<Document>();

    // Many to many
    private List<Role> roles = new ArrayList<Role>();

    // ---------------------------
    // Constructors
    // ---------------------------

    public Account() {
    }

    public Account(String primaryKey) {
        setId(primaryKey);
    }

    // -------------------------------
    // Role names support
    // -------------------------------

    /**
     * Returns the granted authorities for this user. You may override
     * this method to provide your own custom authorities.
     */
    @Transient
    @XmlTransient
    public List<String> getRoleNames() {
        List<String> roleNames = new ArrayList<String>();

        for (Role role : getRoles()) {
            roleNames.add(role.getRoleName());
        }

        return roleNames;
    }

    // -------------------------------
    // Getter & Setter
    // -------------------------------

    // -- [id] ------------------------

    @Column(name = "ID", length = 32)
    @GeneratedValue(generator = "strategy-uuid")
    @GenericGenerator(name = "strategy-uuid", strategy = "uuid")
    @Id
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @Transient
    public boolean isIdSet() {
        return id != null && !id.isEmpty();
    }

    // -- [username] ------------------------

    @Size(min = 4, max = 100)
    @NotEmpty
    @Column(name = "LOGIN", nullable = false, unique = true, length = 100)
    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    // -- [password] ------------------------

    @Size(max = 100)
    @NotEmpty
    @Column(name = "`PASSWORD`", nullable = false, length = 100)
    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    // -- [email] ------------------------

    @Size(max = 100)
    @NotEmpty
    @Email
    @Column(name = "EMAIL", nullable = false, unique = true, length = 100)
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    // -- [isEnabled] ------------------------

    @Column(name = "IS_ENABLED", length = 1)
    public Boolean getIsEnabled() {
        return isEnabled;
    }

    public void setIsEnabled(Boolean isEnabled) {
        this.isEnabled = isEnabled;
    }

    // -- [civility] ------------------------

    @Column(name = "CIVILITY", length = 2)
    @Enumerated(STRING)
    public Civility getCivility() {
        return civility;
    }

    public void setCivility(Civility civility) {
        this.civility = civility;
    }

    // -- [firstName] ------------------------

    @Size(max = 100)
    @Column(name = "FIRST_NAME", length = 100)
    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    // -- [lastName] ------------------------

    @Size(max = 100)
    @Column(name = "LAST_NAME", length = 100)
    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    // -- [birthDate] ------------------------

    @Column(name = "BIRTH_DATE", length = 23)
    @Temporal(TIMESTAMP)
    public Date getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(Date birthDate) {
        this.birthDate = birthDate;
    }

    // -- [description] ------------------------

    @Size(max = 255)
    @Column(name = "DESCRIPTION")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    // -- [addressId] ------------------------

    @Column(name = "ADDRESS_ID", precision = 10, insertable = false, updatable = false)
    public Integer getAddressId() {
        return addressId;
    }

    private void setAddressId(Integer addressId) {
        this.addressId = addressId;
    }

    // -- [creationDate] ------------------------

    @Column(name = "CREATION_DATE", length = 23)
    @Temporal(TIMESTAMP)
    public Date getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(Date creationDate) {
        this.creationDate = creationDate;
    }

    // -- [creationAuthor] ------------------------

    @Column(name = "CREATION_AUTHOR", length = 200)
    public String getCreationAuthor() {
        return creationAuthor;
    }

    public void setCreationAuthor(String creationAuthor) {
        this.creationAuthor = creationAuthor;
    }

    // -- [lastModificationDate] ------------------------

    @Column(name = "LAST_MODIFICATION_DATE", length = 23)
    @Temporal(TIMESTAMP)
    public Date getLastModificationDate() {
        return lastModificationDate;
    }

    public void setLastModificationDate(Date lastModificationDate) {
        this.lastModificationDate = lastModificationDate;
    }

    // -- [lastModificationAuthor] ------------------------

    @Column(name = "LAST_MODIFICATION_AUTHOR", length = 200)
    public String getLastModificationAuthor() {
        return lastModificationAuthor;
    }

    public void setLastModificationAuthor(String lastModificationAuthor) {
        this.lastModificationAuthor = lastModificationAuthor;
    }

    // -- [version] ------------------------

    @Column(name = "VERSION", precision = 10)
    @Version
    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    // --------------------------------------------------------------------
    // Many to One support
    // --------------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: Account.addressId ==> Address.id
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @JoinColumn(name = "ADDRESS_ID")
    @ManyToOne(cascade = { PERSIST, MERGE }, fetch = LAZY)
    public Address getHomeAddress() {
        return homeAddress;
    }

    /**
     * Set the homeAddress without adding this Account instance on the passed homeAddress
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by {@link Address}
     */
    public void setHomeAddress(Address homeAddress) {
        this.homeAddress = homeAddress;

        // We set the foreign key property so it can be used by our JPA search by Example facility.
        if (homeAddress != null) {
            setAddressId(homeAddress.getId());
        } else {
            setAddressId(null);
        }
    }

    // --------------------------------------------------------------------
    // One to Many support
    // --------------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // one to many: account ==> books
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @OneToMany(mappedBy = "account", orphanRemoval = true, cascade = ALL)
    public List<Book> getBooks() {
        return books;
    }

    /**
     * Set the {@link Book} list.
     * It is recommended to use the helper method {@link #addBook(Book)} / {@link #removeBook(Book)}
     * if you want to preserve referential integrity at the object level.
     *
     * @param books the list to set
     */
    public void setBooks(List<Book> books) {
        this.books = books;
    }

    /**
     * Helper method to add the passed {@link Book} to the books list
     * and set this account on the passed book to preserve referential
     * integrity at the object level.
     *
     * @param book the to add
     * @return true if the book could be added to the books list, false otherwise
     */
    public boolean addBook(Book book) {
        if (getBooks().add(book)) {
            book.setAccount((Account) this);
            return true;
        }
        return false;
    }

    /**
     * Helper method to remove the passed {@link Book} from the books list and unset
     * this account from the passed book to preserve referential integrity at the object level.
     *
     * @param book the instance to remove
     * @return true if the book could be removed from the books list, false otherwise
     */
    public boolean removeBook(Book book) {
        if (getBooks().remove(book)) {
            book.setAccount(null);
            return true;
        }
        return false;
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // one to many: account ==> documents
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @OneToMany(mappedBy = "account", orphanRemoval = true, cascade = ALL)
    public List<Document> getDocuments() {
        return documents;
    }

    /**
     * Set the {@link Document} list.
     * It is recommended to use the helper method {@link #addDocument(Document)} / {@link #removeDocument(Document)}
     * if you want to preserve referential integrity at the object level.
     *
     * @param documents the list to set
     */
    public void setDocuments(List<Document> documents) {
        this.documents = documents;
    }

    /**
     * Helper method to add the passed {@link Document} to the documents list
     * and set this account on the passed document to preserve referential
     * integrity at the object level.
     *
     * @param document the to add
     * @return true if the document could be added to the documents list, false otherwise
     */
    public boolean addDocument(Document document) {
        if (getDocuments().add(document)) {
            document.setAccount((Account) this);
            return true;
        }
        return false;
    }

    /**
     * Helper method to remove the passed {@link Document} from the documents list and unset
     * this account from the passed document to preserve referential integrity at the object level.
     *
     * @param document the instance to remove
     * @return true if the document could be removed from the documents list, false otherwise
     */
    public boolean removeDocument(Document document) {
        if (getDocuments().remove(document)) {
            document.setAccount(null);
            return true;
        }
        return false;
    }

    // --------------------------------------------------------------------
    // Many to Many
    // --------------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-many: account ==> roles
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    /**
     * Returns the roles list.
     */
    @JoinTable(name = "ACCOUNT_ROLE", joinColumns = @JoinColumn(name = "ACCOUNT_ID"), inverseJoinColumns = @JoinColumn(name = "ROLE_ID"))
    @ManyToMany(cascade = { PERSIST, MERGE })
    public List<Role> getRoles() {
        return roles;
    }

    /**
     * Set the roles list.
     * <p>
     * It is recommended to use the helper method {@link #addRole(Role)} / {@link #removeRole(Role)}
     * if you want to preserve referential integrity at the object level.
     *
     * @param roles the list of Role
     */
    public void setRoles(List<Role> roles) {
        this.roles = roles;
    }

    /**
     * Helper method to add the passed {@link Role} to the roles list.
     */
    public boolean addRole(Role role) {
        return getRoles().add(role);
    }

    /**
     * Helper method to remove the passed {@link Role} from the roles list.
     */
    public boolean removeRole(Role role) {
        return getRoles().remove(role);
    }

    /**
     * Helper method to determine if the passed {@link Role} is present in the roles list.
     */
    public boolean containsRole(Role role) {
        return getRoles() != null && getRoles().contains(role);
    }

    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    /**
     * equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof Account && hashCode() == other.hashCode());
    }

    private volatile int previousHashCode = 0;

    @Override
    public int hashCode() {
        int hashCode = Objects.hashCode(getUsername());
        if (previousHashCode != 0 && previousHashCode != hashCode) {
            log.warn("DEVELOPER: hashCode has changed!." //
                    + "If you encounter this message you should take the time to carefuly review equals/hashCode for: " //
                    + getClass().getCanonicalName());
        }

        previousHashCode = hashCode;
        return hashCode;
    }

    /**
     * Construct a readable string representation for this Account instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return Objects.toStringHelper(this) //
                .add("id", getId()) //
                .add("username", getUsername()) //
                .add("password", getPassword()) //
                .add("email", getEmail()) //
                .add("isEnabled", getIsEnabled()) //
                .add("civility", getCivility()) //
                .add("firstName", getFirstName()) //
                .add("lastName", getLastName()) //
                .add("birthDate", getBirthDate()) //
                .add("description", getDescription()) //
                .add("addressId", getAddressId()) //
                .add("creationDate", getCreationDate()) //
                .add("creationAuthor", getCreationAuthor()) //
                .add("lastModificationDate", getLastModificationDate()) //
                .add("lastModificationAuthor", getLastModificationAuthor()) //
                .add("version", getVersion()) //
                .toString();
    }

    @PrePersist
    protected void prePersist() {
        if (AuditContextHolder.audit()) {
            setCreationAuthor(AuditContextHolder.username());
            setCreationDate(new Date());
        }
    }

    @PreUpdate
    protected void preUpdate() {
        if (AuditContextHolder.audit()) {
            setLastModificationAuthor(AuditContextHolder.username());
            setLastModificationDate(new Date());
        }
    }
}