/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring-conversation:src/main/java/domain/Controller.e.vm.java
 */
package org.ikane.demospringfuse.web.domain;

import java.util.List;
import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Singleton;
import javax.servlet.http.HttpServletRequest;
import org.ikane.demospringfuse.dao.support.SearchParameters;
import org.ikane.demospringfuse.domain.Account;
import org.ikane.demospringfuse.repository.AccountRepository;
import org.ikane.demospringfuse.web.conversation.Conversation;
import org.ikane.demospringfuse.web.conversation.ConversationContext;
import org.ikane.demospringfuse.web.conversation.ConversationFactory;

/**
 * Stateless controller for Account conversation start. Provides also auto-complete support. 
 */
@Named
@Singleton
public class AccountController implements ConversationFactory {
    public final static String editUri = "/domain/accountEdit.faces";
    public final static String selectUri = "/domain/accountSelect.faces";
    private AccountRepository accountRepository;

    @Inject
    public void setAccountRepository(AccountRepository accountRepository) {
        this.accountRepository = accountRepository;
    }

    // --------------------------------
    // ConversationFactoryImpl
    // --------------------------------

    @Override
    public boolean canCreateConversation(HttpServletRequest request) {
        return selectUri.equals(request.getServletPath());
    }

    @Override
    public Conversation createConversation(HttpServletRequest request) {
        String uri = request.getServletPath();
        if (selectUri.equals(uri)) {
            Conversation conversation = Conversation.newInstance(request);
            ConversationContext<Account> ctx = newSearchContext();
            ctx.setLabelWithKey("account");
            conversation.setNextContext(ctx);
            return conversation;
        }

        throw new IllegalStateException("Unexpected conversation creation demand");
    }

    // --------------------------------
    // Autocomplete support
    // --------------------------------

    /**
     * This method is used from primefaces autocomplete components.
     */
    public List<Account> complete(String value) {
        SearchParameters sp = new SearchParameters().anywhere().searchPattern(value);
        // order by business key
        sp.orderBy("username");
        return accountRepository.find(sp);
    }

    // --------------------------------
    // Helper 
    // --------------------------------    

    /**
     * Helper to construct a new ConversationContext to edit an Account.
     * @param account the entity to edit.
     */
    public static ConversationContext<Account> newEditContext(final Account account) {
        ConversationContext<Account> ctx = new ConversationContext<Account>();
        ctx.setEntity(account); // used by GenericEditForm.init()
        ctx.setViewUri(editUri);
        ctx.addSourceIgnoringUseConversationEntityManager("form:homeAddress");
        return ctx;
    }

    /**
     * Helper to construct a new ConversationContext to edit an Account.
     * @param id the id of the entity to edit.
     */
    public static ConversationContext<Account> newEditContext(final String id) {
        ConversationContext<Account> ctx = new ConversationContext<Account>();
        ctx.setEntityId(id); // used by GenericEditForm.init()
        ctx.setViewUri(editUri);
        ctx.addSourceIgnoringUseConversationEntityManager("form:homeAddress");
        return ctx;
    }

    /**
     * Helper to construct a new ConversationContext for search/selection.
     */
    public static ConversationContext<Account> newSearchContext() {
        ConversationContext<Account> ctx = new ConversationContext<Account>();
        ctx.setUseConversationEntityManager(false);
        ctx.setViewUri(selectUri);
        return ctx;
    }
}