/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
 */
package org.ikane.demospringfuse.web.domain;

import static org.ikane.demospringfuse.web.conversation.ConversationHolder.getCurrentConversation;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.inject.Named;
import org.ikane.demospringfuse.domain.Account;
import org.ikane.demospringfuse.domain.Address;
import org.ikane.demospringfuse.domain.Book;
import org.ikane.demospringfuse.domain.Document;
import org.ikane.demospringfuse.domain.Role;
import org.ikane.demospringfuse.repository.AccountRepository;
import org.ikane.demospringfuse.web.conversation.ConversationCallBack;
import org.ikane.demospringfuse.web.conversation.ConversationContext;
import org.ikane.demospringfuse.web.domain.AddressController;
import org.ikane.demospringfuse.web.domain.support.GenericEditForm;
import org.ikane.demospringfuse.web.domain.support.SelectableListDataModel;
import org.ikane.demospringfuse.web.util.TabBean;
import org.omnifaces.util.Faces;
import org.primefaces.event.SelectEvent;
import org.springframework.context.annotation.Scope;

/**
 * View Helper/Controller to edit {@link Account}.
 */
@Named
@Scope("conversation")
public class AccountEditForm extends GenericEditForm<Account, String> {
    private TabBean tabBean = new TabBean();
    private SelectableListDataModel<Book> books;
    private SelectableListDataModel<Document> documents;
    private SelectableListDataModel<Role> roles;

    @Inject
    public void setAccountRepository(AccountRepository accountRepository) {
        setRepository(accountRepository);
    }

    /**
     * Prepare the x-to-many list data models.
     */
    @Override
    @PostConstruct
    protected void init() {
        super.init();

        // _HACK_ Attention: you must realize that associations below (when lazy) are fetched from the view, non transactionnally.

        if (books == null) {
            books = new SelectableListDataModel<Book>(getAccount().getBooks());
        }

        if (documents == null) {
            documents = new SelectableListDataModel<Document>(getAccount().getDocuments());
        }

        if (roles == null) {
            roles = new SelectableListDataModel<Role>(getAccount().getRoles());
        }
    }

    public Account getAccount() {
        return getEntity();
    }

    // --------------------------------------------------
    // Support for auto-complete and callback many to one 
    // --------------------------------------------------

    public void setSelectedHomeAddress(Address address) {
        // detach the currently set target if present
        //  1) to prevent any potential modification to go to the db
        //  2) to reduce session size        	
        if (getAccount().getHomeAddress() != null) {
            getCurrentConversation().getEntityManager().detach(getAccount().getHomeAddress());
        }

        if (address != null) {
            getAccount().setHomeAddress(getCurrentConversation().getEntityManager().merge(address));
        } else {
            getAccount().setHomeAddress(null);
        }
    }

    public Address getSelectedHomeAddress() {
        return getAccount().getHomeAddress();
    }

    /**
     * View helper to store the x-to-many associations tab's index. 
     */
    public TabBean getTabBean() {
        return tabBean;
    }

    public SelectableListDataModel<Book> getBooks() {
        return books;
    }

    public SelectableListDataModel<Document> getDocuments() {
        return documents;
    }

    public SelectableListDataModel<Role> getRoles() {
        return roles;
    }

    // --------------------------------------------
    // Actions for homeAddress association
    // --------------------------------------------

    public String viewHomeAddress() {
        ConversationContext<Address> ctx = AddressController.newEditContext(getAccount().getHomeAddress());
        ctx.setLabelWithKey("account_homeAddress");
        getCurrentConversation().setNextContextSubReadOnly(ctx);
        return ctx.view();
    }

    public String selectHomeAddress() {
        ConversationContext<Address> ctx = AddressController.newSearchContext();
        ctx.setLabelWithKey("account_homeAddress");
        ctx.setCallBack(selectHomeAddressCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<Address> selectHomeAddressCallBack = new ConversationCallBack<Address>() {
        private static final long serialVersionUID = 1L;

        // will be invoked from the AccountLazyDataModel
        @Override
        protected void onSelected(Address address) {
            setSelectedHomeAddress(address);
            messageUtil.infoEntity("status_selected_ok", getAccount().getHomeAddress());
        }
    };

    public String addHomeAddress() {
        ConversationContext<Address> ctx = AddressController.newEditContext(new Address());
        ctx.setLabelWithKey("account_homeAddress");
        ctx.setCallBack(addHomeAddressCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<Address> addHomeAddressCallBack = new ConversationCallBack<Address>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Address address) {
            // detach the currently set target if present
            if (getAccount().getHomeAddress() != null) {
                getCurrentConversation().getEntityManager().detach(getAccount().getHomeAddress());
            }

            getAccount().setHomeAddress(address);
            messageUtil.infoEntity("status_created_ok", address);
        }
    };

    public String editHomeAddress() {
        ConversationContext<Address> ctx = AddressController.newEditContext(getAccount().getHomeAddress());
        ctx.setLabelWithKey("account_homeAddress");
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    // --------------------------------------------
    // Actions for book association
    // --------------------------------------------

    /**
     * Action with implicit navigation to edit the selected book.
     */
    public String editBook() {
        ConversationContext<Book> ctx = BookController.newEditContext(books.getSelectedRow());
        ctx.setLabelWithKey("account_books");
        ctx.setCallBack(editBookCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<Book> editBookCallBack = new ConversationCallBack<Book>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Book book) {
            messageUtil.infoEntity("status_edited_ok", book);
        }
    };

    public String viewBook() {
        ConversationContext<Book> ctx = BookController.newEditContext(books.getSelectedRow());
        ctx.setLabelWithKey("account_books");
        getCurrentConversation().setNextContextSubReadOnly(ctx);
        return ctx.view();
    }

    /**
     * This listener force the navigation to the edit or view page of the target @{link Book}.
     */
    public void onBookRowSelect(SelectEvent event) {
        Faces.navigate(context().isReadOnly() ? viewBook() : editBook());
    }

    public void removeBook() {
        getAccount().removeBook(books.getSelectedRow());
        messageUtil.infoEntity("status_removed_ok", books.getSelectedRow());
    }

    public String addBook() {
        Book book = new Book();
        book.setAccount(getAccount()); // for display
        ConversationContext<Book> ctx = BookController.newEditContext(book);
        ctx.setLabelWithKey("account_books");
        ctx.setCallBack(addBookCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<Book> addBookCallBack = new ConversationCallBack<Book>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Book book) {
            getAccount().addBook(book);
            messageUtil.infoEntity("status_added_new_ok", book);
        }
    };

    // --------------------------------------------
    // Actions for document association
    // --------------------------------------------

    /**
     * Action with implicit navigation to edit the selected document.
     */
    public String editDocument() {
        ConversationContext<Document> ctx = DocumentController.newEditContext(documents.getSelectedRow());
        ctx.setLabelWithKey("account_documents");
        ctx.setCallBack(editDocumentCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<Document> editDocumentCallBack = new ConversationCallBack<Document>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Document document) {
            messageUtil.infoEntity("status_edited_ok", document);
        }
    };

    public String viewDocument() {
        ConversationContext<Document> ctx = DocumentController.newEditContext(documents.getSelectedRow());
        ctx.setLabelWithKey("account_documents");
        getCurrentConversation().setNextContextSubReadOnly(ctx);
        return ctx.view();
    }

    /**
     * This listener force the navigation to the edit or view page of the target @{link Document}.
     */
    public void onDocumentRowSelect(SelectEvent event) {
        Faces.navigate(context().isReadOnly() ? viewDocument() : editDocument());
    }

    public void removeDocument() {
        getAccount().removeDocument(documents.getSelectedRow());
        messageUtil.infoEntity("status_removed_ok", documents.getSelectedRow());
    }

    public String addDocument() {
        Document document = new Document();
        document.setAccount(getAccount()); // for display
        ConversationContext<Document> ctx = DocumentController.newEditContext(document);
        ctx.setLabelWithKey("account_documents");
        ctx.setCallBack(addDocumentCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<Document> addDocumentCallBack = new ConversationCallBack<Document>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Document document) {
            getAccount().addDocument(document);
            messageUtil.infoEntity("status_added_new_ok", document);
        }
    };

    // --------------------------------------------
    // Actions for role association
    // --------------------------------------------
    public String selectRole() {
        ConversationContext<Role> ctx = RoleController.newSearchContext();
        ctx.setLabelWithKey("account_roles");
        ctx.setCallBack(selectRoleCallBack);
        ctx.setVar("multiCheckboxSelection", true);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<Role> selectRoleCallBack = new ConversationCallBack<Role>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onSelected(List<Role> roles) {
            for (Role role : roles) {
                Role mergedRole = getCurrentConversation().getEntityManager().merge(role);
                if (!getAccount().containsRole(mergedRole)) {
                    getAccount().addRole(mergedRole);
                    messageUtil.infoEntity("status_added_existing_ok", mergedRole);
                }
            }
        }
    };

    /**
     * Action with implicit navigation to edit the selected role.
     */
    public String editRole() {
        ConversationContext<Role> ctx = RoleController.newEditContext(roles.getSelectedRow());
        ctx.setLabelWithKey("account_roles");
        ctx.setCallBack(editRoleCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<Role> editRoleCallBack = new ConversationCallBack<Role>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Role role) {
            messageUtil.infoEntity("status_edited_ok", role);
        }
    };

    public String viewRole() {
        ConversationContext<Role> ctx = RoleController.newEditContext(roles.getSelectedRow());
        ctx.setLabelWithKey("account_roles");
        getCurrentConversation().setNextContextSubReadOnly(ctx);
        return ctx.view();
    }

    /**
     * This listener force the navigation to the edit or view page of the target @{link Role}.
     */
    public void onRoleRowSelect(SelectEvent event) {
        Faces.navigate(context().isReadOnly() ? viewRole() : editRole());
    }

    public void removeRole() {
        getAccount().removeRole(roles.getSelectedRow());
        // let's detach it for 2 reasons: 
        //  1) to prevent any potential modification to go to the db
        //  2) reduce session size	
        getCurrentConversation().getEntityManager().detach(roles.getSelectedRow());
        messageUtil.infoEntity("status_removed_ok", roles.getSelectedRow());
    }

    public String addRole() {
        ConversationContext<Role> ctx = RoleController.newEditContext(new Role());
        ctx.setLabelWithKey("account_roles");
        ctx.setCallBack(addRoleCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<Role> addRoleCallBack = new ConversationCallBack<Role>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Role role) {
            getAccount().addRole(role);
            messageUtil.infoEntity("status_added_new_ok", role);
        }
    };
}