/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
 */
package org.ikane.demospringfuse.web.domain;

import static org.ikane.demospringfuse.web.conversation.ConversationHolder.getCurrentConversation;
import javax.inject.Inject;
import javax.inject.Named;
import org.ikane.demospringfuse.domain.Account;
import org.ikane.demospringfuse.domain.Book;
import org.ikane.demospringfuse.repository.BookRepository;
import org.ikane.demospringfuse.web.conversation.ConversationContext;
import org.ikane.demospringfuse.web.domain.AccountController;
import org.ikane.demospringfuse.web.domain.support.GenericEditForm;
import org.springframework.context.annotation.Scope;

/**
 * View Helper/Controller to edit {@link Book}.
 */
@Named
@Scope("conversation")
public class BookEditForm extends GenericEditForm<Book, Integer> {

    @Inject
    public void setBookRepository(BookRepository bookRepository) {
        setRepository(bookRepository);
    }

    public Book getBook() {
        return getEntity();
    }

    // --------------------------------------------------
    // Support for auto-complete and callback many to one 
    // --------------------------------------------------

    public void setSelectedAccount(Account account) {
        // detach the currently set target if present
        //  1) to prevent any potential modification to go to the db
        //  2) to reduce session size        	
        if (getBook().getAccount() != null) {
            getCurrentConversation().getEntityManager().detach(getBook().getAccount());
        }

        if (account != null) {
            getBook().setAccount(getCurrentConversation().getEntityManager().merge(account));
        } else {
            getBook().setAccount(null);
        }
    }

    public Account getSelectedAccount() {
        return getBook().getAccount();
    }

    // --------------------------------------------
    // Actions for account association
    // --------------------------------------------

    public String viewAccount() {
        ConversationContext<Account> ctx = AccountController.newEditContext(getBook().getAccount());
        ctx.setLabelWithKey("book_account");
        getCurrentConversation().setNextContextSubReadOnly(ctx);
        return ctx.view();
    }
}